# -*- coding: utf-8 -*-
"""Telugu_chandassu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KDviFp8URsj0KiqDTyS84vxWZAkqt2VE
"""

import nltk
nltk.download('punkt')

pip install simple-colors

import pandas as pd

df=pd.read_csv("dataset.txt",sep="-",header=None)
df.columns=['poemline','chandassu_sequence']
df.head()

vocabulary=["య","మ","త","ర","జ","భ","న","స","వ","గ","ల"]
bigram_matrix={}
unigram_matrix={}

#unigram probabilities
v_s=len(vocabulary)
value=0
for i in vocabulary:
  count=0
  for j in df.chandassu_sequence:
    count=count+j.count(i)
  unigram_matrix[i]=count
for k,v in unigram_matrix.items():
  value=value+v
for k,v in unigram_matrix.items():
  unigram_matrix[k]=v/value
for k,v in unigram_matrix.items():
  print(k+":"+str(v)+"\n")

#here vocabulary size is 10
#as some counts may be zero laplace smoothing
vocabulary_size=len(vocabulary)
for i in vocabulary:
  bigram_matrix[i]={}
  for j in vocabulary:
    combine_count=0
    single_count=0
    combine_word=i+j
    for k in df.chandassu_sequence:
      combine_count=combine_count+k.count(combine_word)
      single_count=single_count+k.count(i)
    cond_prob = ((combine_count)+1)/((single_count)+vocabulary_size)
    cond_prob=0.5*cond_prob
    cond_prob=cond_prob+(0.5)*(unigram_matrix[j])
    bigram_matrix[i][j]=cond_prob
for keys, value in bigram_matrix.items():
   print("\n"+keys+":\n")
   print(value)

#loss function
import math
def loss(act,pred):
  y_true=act
  y_pred=pred
  ans=y_true/y_pred
  l = y_true*(math.log(ans,10))
  return l
#print(loss(0.05555555555555555,0.05555555555555555))

from simple_colors import *
import nltk
import sys
poem=[]
print("1:ఉత్పలమాల")
print("2:చంపకమాల")
print("3:మత్తేభము")
print("4:శార్దూలం")
list1=[["ఉత్పలమాల","భరనభభరవ"],["చంపకమాల","నజభజజజర"],["మత్తేభము","సభరనమయవ"],["శార్దూలం","మసజసతతగ"]]
print("please choose chandassu(enter number from 1 to 4):")
n=int(input())
print("\nyou have choosen ",list1[n-1][0]," chandassu\n")
print("so your poem must follow this chandassu sequence: ",list1[n-1][1],"\n")
# poem=[]
# for i in range(4):
#   print("please enter line "+str(i+1)+" of your poem")
#   line=str(input())
#   poem.append(line)
poem=["భానుసమాన విన్ బరన భారలగంబుల గూడి విశ్రమ",
      "స్థానము నందు బద్మజ యుతంబుగ నుత్పలమాలయై చనున్",
      "పద్మజయుగ్యతిన్ భరనభారలగంబులఁ జెంది సన్మనః",
      "పద్మవికాస హేతువగు పద్యము నుత్పలమాలయం డ్రిలన్"]
normal_achulu=['అ','ఇ','ఉ','ఎ','ఋ','ఒ']
dirgha_achulu=['ఆ','ఈ','ఊ','ఏ','ఓ','ఐ','ఔ','ౠ']
dirgha=['ా','ౌ','ై','ీ','ూ','ో','ే']
normal = ['ి','ు','ె','ొ']
sunna=['ం']
arasunna=['ఁ']
visarga=['ః']
aksharalu = ['క','ఖ','గ','ఘ','చ','ఛ','జ','ఝ','ట','ఠ','డ','ఢ',
               'ణ','త','థ','ద','ధ','న','ప','ఫ','బ','భ','మ','య',
               'ర','ల','వ','శ','ష','స','హ','ళ','క్ష','ఱ']
polluhallu=['్']
def label_lagu_guru(poem):
  lagu_guru=[]
  for i in range(len(poem)):#no:of lines
    tokens=nltk.word_tokenize(poem[i])#list of words in a line
    for a in tokens:
      if(a=="," or a=="?" or a=="!" or a==";"):
        tokens.remove(a)
    line_list=[]
    for j in range(len(tokens)-1,-1,-1):
      words_list=[]
      k=len(tokens[j])-1
      while(k>=0):
        #print(tokens[j][k])
        if(tokens[j][k] in polluhallu):#identified polluhallu
          if(k-2==-1):#if starting letter of a word is samyuktha and dwitiya aksharalu
            words_list.append('U')
            k=-1
          else:
            p=k-1 #since polluhallu at kth index
            if(tokens[j][k-2] in polluhallu):#for sha(క్ష) aksharam
              k=k-2
            else:
              count=0
              for p in range(k-1,-1,-1):#inorder to find two aksharalu before polluhallu
                if(tokens[j][p] in aksharalu):
                  count=count+1
                  if(count==2):
                    break
              words_list.append('U')
              k=p-1
        elif(tokens[j][k] in arasunna):#inorder to find arasunna
          p=k-1
          if(tokens[j][p] in aksharalu):
            words_list.append('|')
            k=p-1
          else:
            k=p
        elif((tokens[j][k] in sunna) or (tokens[j][k] in visarga)):
          p=k-1#since sunna or visarga or dirgha at kth index
          for p in range(k-1,-1,-1):
            if(tokens[j][p] in aksharalu):
              break
            else:
              continue
          words_list.append('U')
          k=p-1 
        elif((tokens[j][k] in dirgha)):
          p=k-1#since dirgha at kth index
          for p in range(k-1,-1,-1):
            if(tokens[j][p] in aksharalu):
              break
            else:
              continue
          words_list.append('U')
          k=p-1 
        elif((tokens[j][k] in normal)):
          p=k-1#since normal aksharalu at kth index
          for p in range(k-1,-1,-1):
            if(tokens[j][p] in aksharalu):
              break
            else:
              continue
          words_list.append('|')
          k=p-1 
        elif((tokens[j][k]) in normal_achulu):#append lagu if it is in normal_achulu
          words_list.append('|')
          k=k-1
        elif((tokens[j][k]) in dirgha_achulu):#append guru if it is in dirgha_achulu
          words_list.append('U')
          k=k-1
        else:
          words_list.append('|')
          k=k-1
      words_list.reverse()#as we are labelling from last of a word
      line_list.append(words_list)
    line_list.reverse()#as we are labelling from last of a line
    lagu_guru.append(line_list)
  for i in range(len(poem)):#if dwitiya or samyuktha aksharalu present at starting of a word
    tokens=nltk.word_tokenize(poem[i])
    for k in tokens:
      if(k=="," or k=="?" or k=="!" or k==";"):
        tokens.remove(k)
    for j in range(len(tokens)):
      #print(tokens)
      if(len(tokens[j])!=1):
        if(i==0 and j==0):
          continue
        elif(tokens[j][1] in polluhallu):#identified dwitiya or samyuktha aksharalu
          if(j==0):#if that dwitiya or samyukatha aksharam present at starting of a line then label previous line character as guru
            t=nltk.word_tokenize(poem[i-1])
            le=len(t)-1
            lagu_guru[i][j].pop(0)
            lagu_guru[i-1][le].pop()
            lagu_guru[i-1][le].append('U')
          else:#if that dwitiya or samyukatha aksharam present at starting of a word then label previous word last character as guru
            lagu_guru[i][j].pop(0)
            lagu_guru[i][j-1].pop()
            lagu_guru[i][j-1].append('U')
  return lagu_guru
ans=label_lagu_guru(poem)
labels=[]
for i in ans:
    s=""
    for j in i:
      for k in j:
        s=s+k
    labels.append(s)
#print(labels)
for i in labels:
  print(i)
print("------------------------------------")
print("Bold ganalu indicates incorrect ganam")
print("------------------------------------")
def ganalu_division(labels,x):
  actual_chandassu = list1[x-1][1]
  sg=["|","U","U","U","|","U","|","|","|","U"]#sg-standard ganalu
  labels_sg=["య","మ","త" , "ర" ,"జ" ,"భ" ,"న" ,"స","వ","గ"]
  ganalu=[]
  wrong_pred=0
  total_pred=0
  loss_count=0
  if(len(labels)==4):
    if(len(labels[0])==len(labels[1])==len(labels[2])==len(labels[3])):
      rm=len(labels[0])%3
      x=len(labels[0])-rm
      for i in range(4):
        s=""
        s1=""
        j=0
        while(j<x-1):
          for k in range(8):
            if( labels[i][j]==sg[k] and labels[i][j+1]==sg[k+1] and labels[i][j+2]==sg[k+2] ):
              s=s+labels_sg[k]
              total_pred=total_pred+1
              s1=s1+labels_sg[k]
              if(len(s)==1):
                le=len(s)
                l=loss(unigram_matrix[actual_chandassu[0]],unigram_matrix[s[0]])
                if(l!=0.0):
                  length=len(s1)
                  # print(s)
                  if(s[le-1]!=actual_chandassu[le-1]):
                    loss_count=loss_count+l
                    wrong_pred=wrong_pred+1
                    s1=s1[:length-1]+black(s1[length-1],'bold')
              else:
                le=len(s)
                l=loss(bigram_matrix[actual_chandassu[le-2]][actual_chandassu[le-1]],bigram_matrix[s[-2]][s[-1]])
                if(l!=0.0):
                  length=len(s1)
                  # print(s)
                  if(s[le-1]!=actual_chandassu[le-1]):
                     loss_count=loss_count+l
                     wrong_pred=wrong_pred+1
                     s1=s1[:length-1]+black(s1[length-1],'bold')
            else:
              continue
          j=j+3
        if(rm==1):
          if(labels[i][x]=="U"):
            s=s+"గ"
            s1=s1+"గ"
            total_pred=total_pred+1
            le=len(s)
            length=len(s1)
            if(s[le-1]!=actual_chandassu[le-1]):
                    loss_count=loss_count+loss(bigram_matrix[actual_chandassu[le-2]][actual_chandassu[le-1]],bigram_matrix[s[-2]][s[-1]])
                    wrong_pred=wrong_pred+1
                    s1=s1[:length-1]+black(s1[length-1],'bold')
          else:
            s=s+'ల'
            s1=s1+'ల'
            le=len(s)
            length=len(s1)
            total_pred=total_pred+1
            wrong_pred=wrong_pred+1
            loss_count=loss_count+loss(bigram_matrix[actual_chandassu[le-2]][actual_chandassu[le-1]],bigram_matrix[s[-2]][s[-1]])
            s1=s1[:length-1]+black(s1[length-1],'bold')
        elif(rm==2):
          if( labels[i][x]=="|" and labels[i][x+1]=="U"):
              s=s+"వ"
              s1=s1+"వ"
              total_pred=total_pred+1
              le=len(s)
              length=len(s1)
              if(s[le-1]!=actual_chandassu[le-1]):
                    loss_count=loss_count+loss(bigram_matrix[actual_chandassu[le-2]][actual_chandassu[le-1]],bigram_matrix[s[-2]][s[-1]])
                    wrong_pred=wrong_pred+1
                    s1=s1[:length-1]+black(s1[length-1],'bold')
          elif(labels[i][x]=="|" and labels[i][x+1]=="|"):
              s=s+'లల'
              s1=s1+'లల'
              le=len(s)
              total_pred=total_pred+1
              wrong_pred=wrong_pred+1
              loss_count=loss_count+loss(bigram_matrix[actual_chandassu[le-3]][actual_chandassu[le-2]],bigram_matrix[s[-3]][s[-2]])
              length=len(s1)
              s1=s1[:length-2]+black(s1[length-2],'bold')+black(s1[length-1],'bold')
          elif(labels[i][x]=="U" and labels[i][x+1]=="|"):
              s=s+"హ"
              s1=s1+"హ"
              le=len(s)
              total_pred=total_pred+1
              wrong_pred=wrong_pred+1
              length=len(s1)
              loss_count=loss_count+loss(bigram_matrix[actual_chandassu[le-2]][actual_chandassu[le-1]],bigram_matrix[s[-2]][s[-1]])
              s1=s1[:length-1]+black(s1[length-1],'bold')
          else:
              s=s+"గగ"
              s1=s1+"గగ"
              le=len(s)
              total_pred=total_pred+1
              wrong_pred=wrong_pred+1
              length=len(s1)
              loss_count=loss_count+loss(bigram_matrix[actual_chandassu[le-3]][actual_chandassu[le-2]],bigram_matrix[s[-3]][s[-2]])
              s1=s1[:length-2]+black(s1[length-2],'bold')+black(s1[length-1],'bold')
        ganalu.append(s1)
      return ganalu,wrong_pred,total_pred,loss_count
    else:
      return 0
res=ganalu_division(labels,n)
if(len(res)!=1):
  for i in res[0]:
    print(i)
  print("----------------------------")
  prasa=[]
  for i in poem:
    count=0
    if(i[1] in polluhallu):
      for j in i[2:]:
        if j in aksharalu:
          count=count+1
        if(count==2):
          prasa.append(j)
          break
    else:
      for j in i:
        if j in aksharalu:
          count=count+1
        if(count==2):
          prasa.append(j)
          break
  #print(prasa)
  if(prasa[0]==prasa[1]==prasa[2]==prasa[3]):
    print("your poem follows prasa niyamam and prasa letter is : "+prasa[0])

  else:
    print("your poem does not follow prasa niyamam")
  acc=((res[2]-res[1])/(res[2]))*100
  print("------------------------------")
  print("your poem accuracy is "+str(acc))
  print("------------------------------")
  print("loss of your poem is: "+str(res[3]))
else:
  print("the poem is not classify into any type of chandassu")

"""**For finding accuracy**"""

df1=pd.read_csv("accuracy.txt",sep="-",header=None)
df1.columns=['poem','vrutha_padyam','chandassu']#1 indicates poem belongs to vrutha padyam and 0 indicated does not belong to vrutha padyam
df1.head()

true_results=df1.vrutha_padyam
lis=[]
for i in true_results:
  lis.append(i)
print(lis)
accuracy=[]
true_chandassu=df1.chandassu
lis1=[]
for i in true_chandassu:
  lis1.append(i)
#print(lis1)
count=-1
for b in df1.poem:
  count=count+1
  p=[]
  p=b.split("|")
  for c in range(len(p)):
    p[c]=p[c].strip()
  a=label_lagu_guru(p)
  lab=[]
  for p in a:
    s=""
    for q in p:
      for r in q:
        s=s+r
    lab.append(s)
  re=ganalu_division(lab,lis1[count])
  if(re==0):
      accuracy.append(0)
  else:
    if(re[1]==0):
      accuracy.append(1)
    else:
      accuracy.append(0)
print(accuracy)
tp=0
total=len(lis)
for i in range(len(lis)):
  if(lis[i]==accuracy[i]):
    tp=tp+1
acc=(tp/total)*100
print(acc)